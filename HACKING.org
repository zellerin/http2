This file describes in more detail of client and server implementation, and then selected internal interfaces.

It mostly duplicates the docstrings in code (in fact, it is build upon them), but some value should be in the selection and ordering of the content.

* Client creation
See [[file:client/client.lisp][client.lisp]] for an example how to build a drakma-like client that handles
one request (which is maybe good example, but not effective way to reap
benefits of HTTP2 protocol).

The necessary components are
- connect to the server over TLS with ALPN (CONNECT-TO-TLS-SERVER),
- create connection object (WITH-HTTP2-CONNECTION),
- open request stream by sending the headers (SEND-HEADERS),
- optionally send the request body (to a Common Lisp stream created by
  MAKE-TRANSPORT-OUTPUT-STREAM),
- read the frames until server responds to the request (PROCESS-PENDING-FRAMES),
- read the data from the response (from Common Lisp stream created by
  MAKE-TRANSPORT-INPUT-STREAM). In this example, this is done in a callback
  function that also stops further processing,
- get the drakma-style data from the stream object using
  DRAKMA-STYLE-STREAM-VALUES, that in turn uses HTTP-STREAM-TO-VECTOR to read
  full body as text or binary content, and collected values of the
  VANILLA-CLIENT-STREAM object for status and other headers.

More sophisticated clients could, for example,
- send several queries on the connection,
- receive frames in dedicated thread,
- handle redirect, cookies, etc.

** Detailed documentation

#+BEGIN: lisp-fns-doc :section http2::@client :package http2

- =CONNECT-TO-TLS-SERVER= (function)
   Client TLS stream to ~HOST~ on ~PORT~, created using ~SNI~ and with specified ~ALPN~
   protocol (H2 by default).

   Lambda list:
     : HOST &KEY (PORT 443) (SNI HOST) VERIFY (ALPN-PROTOCOLS '("h2"))
- =WITH-HTTP2-CONNECTION= (function)
   Run ~BODY~ with ~NAME~ bound to instance of ~CLASS~ with parameters.
     Close the underlying network stream when done.

   Lambda list:
     : (NAME CLASS &REST PARAMS) &BODY BODY
- =SEND-HEADERS= (function)
   Send ~HEADERS~ to the connection or stream. ~STREAM~ is either an existing instance
   of a stream, or a HTTP2 connection; in that case a new stream is created on
   it. In both cases, the stream is returned.

   The ~END-HEADERS~ and ~END-STREAM~ allow to set the appropriate flags.

   Lambda list:
     : STREAM-OR-CONNECTION HEADERS &KEY END-STREAM END-HEADERS
     : &ALLOW-OTHER-KEYS
- =MAKE-TRANSPORT-OUTPUT-STREAM= (function)
   An OUTPUT-STREAM built atop RAW ~STREAM~ with added text to binary encoding using
   charset (as understood by flexi-streams) and possibly gzip compression.

   Lambda list:
     : RAW-STREAM CHARSET GZIP
- =MAKE-TRANSPORT-INPUT-STREAM= (function)
   INPUT-STREAM built atop ~RAW-STREAM~.

   Guess encoding and need to gunzip from headers:
   - apply zip decompression if gzip is set
   - if charset is not null, use it to convert to text.

   Lambda list:
     : RAW-STREAM CHARSET GZIP
- =PROCESS-PENDING-FRAMES= (function)
   Read and process all queued frames. This is to be called on client when the
   initial request was send.

   See ~PROCESS-SERVER-STREAM~ in dispatch.lisp for a server equivalent that reads
   all; note that that one also handles locking in multithread environment and some
   other conditions.

   Lambda list:
     : CONNECTION &OPTIONAL JUST-PENDING
- =DRAKMA-STYLE-STREAM-VALUES= (function)
   Return first few values as from DRAKMA:HTTP-REQUEST
   - body of the reply
   - status code as integer
   - alist of headers
   - the ~URL~ the reply came from (bogus value)
   - the connection the reply comes from (not network stream)
   - whether connection is closed (passed as parameter)
   - reason phrase (bogus value)

   Lambda list:
     : HTTP2/CLIENT::RAW-STREAM &KEY HTTP2/CLIENT::CLOSE-STREAM
- =HTTP-STREAM-TO-VECTOR= (function)
   Read HTTP2 stream payload data, do guessed conversions and return either
   string or octets vector. You can expect the HTTP2 stream to be closed after calling
   this.

   Lambda list:
     : RAW-STREAM
- =VANILLA-CLIENT-STREAM= (type)
   Stream class for retrieve-url style functions. Behaves as a client stream,
      allows one to treat data frames as streams, collect headers to slot ~HEADERS~
      so that they can be later shown as a list, and optionally prints callback
      logs. See individual superclasses for details.

- =VANILLA-CLIENT-CONNECTION= (type)
   Connection class for retrieve-url style functions that uses streams of
      ~VANILLA-CLIENT-STREAM~. Behaves as client, can send pings to measure roundtrip
      time and optionally prints history. See individual superclasses for details.

- =CONNECT-TO-TLS-SERVER= (function)
   Client TLS stream to ~HOST~ on ~PORT~, created using ~SNI~ and with specified ~ALPN~
   protocol (H2 by default).

   Lambda list:
     : HOST &KEY (PORT 443) (SNI HOST) VERIFY (ALPN-PROTOCOLS '("h2"))

- =CLIENT-STREAM= (type)
   HTTP2 stream that checks headers as required for clients (no psedoheader other
   than :status allowed, etc.

- =HEADER-COLLECTING-MIXIN= (type)
   Mixin to be used to collect all observed headers to a slot.

- =CLIENT-HTTP2-CONNECTION= (type)
   Client connections have odd-numbered streams.


- =EXTRACT-CHARSET-FROM-CONTENT-TYPE= (function)
   Guess charset from the content type. NIL for binary data.

- =LOGGING-OBJECT= (type)
   Objects with this mixin have ~ADD-LOG~ called in many situations so that the
   communication can be debugged or recorded.

- =MAKE-TRANSPORT-STREAM= (function)
   Make a transport output stream from ~RAW-STREAM~.

   Guess encoding and need to gunzip from headers:
   - apply zip decompression content-encoding is gzip (FIXME: also compression)
   - use charset if understood in content-type
   - otherwise guess whether text (use UTF-8) or binary.

   Lambda list:
     : CONTENT-TYPE

   #+END:

* Simple server support

File [[./server/dispatch.lisp][dispatch.lisp]] provides basic functionality to create http2 server that
responds based on the path of the request.

The [[./server/server.lisp][sample server]] show how to:
- register several handlers (HANDLER, CONSTANT-HANDLER, SCHEDULING-HANDLER, SEND-TEXT-HANDLER or
  REDIRECT-HANDLER to create them, DEFINE-EXACT-HANDLER and
  DEFINE-PREFIX-HANDLER to bind to paths),
- calls SEND-HEADERS in handlers to send response headers, including status
  (FIXME: maybe it is confusing as it is a lexical function that shadows
  existing global function in the client)
- calls CREATE-HTTPS-SERVER to actually start the server and process requests; a
  restart ABORT is available to return from it; otherwise, most errors are
  handled and kill only the affected HTTP2 stream.

** Detailed documentation
#+BEGIN: lisp-fns-doc :section http2::@server :package http2

- =HANDLER= (macro)
   Runs ~BODY~ in a context with
   - ~FLEXI-STREAM-NAME~ bound to a flexi stream,
   - and two available functions, ~SEND-HEADERS~ and ~SEND-GOAWAY~ to make a function
     that has suitable format for an exact or prefix handler; that it, that takes
     two parameters ~CONNECTION~ and (http2) ~STREAM~ and prepares response.

   The ~SEND-HEADERS~ sends the provided headers to the ~STREAM~.

   The ~SEND-GOAWAY~ sends go away frame to the client to close connection.

   Lambda list:
     :

- =CONSTANT-HANDLER= (macro)
   Run ~BODY~ to print the output to ~FLEXI-STREAM-NAME~ in compile time. This
   constant (static) page is served every time as-is.

   Lambda list:
     :

- =SCHEDULING-HANDLER= (macro)
   Version of ~HANDLER~ that is to be used for scheduled (or otherwise processed in
   another thread) responses:
   - It does not close the output stream on exit
   - It makes accessible in ~BODY~ function ~SCHEDULE~ that takes two parameters, delay in miliseconds and action to run after delay. See event stream implementation in the example server for the possible usage.

   Lambda list:
     :

- =SEND-TEXT-HANDLER= (function)
   A handler that returns ~TEXT~ as content of ~CONTENT-TYPE~.
   ~ADDITIONAL-HEADERS~ are sent along with :status and content-type
   headers.

   Lambda list:
     :

- =REDIRECT-HANDLER= (function)
   A handler that emits redirect response with http status being ~CODE~, and
   optionally provided ~CONTENT~ wit ~CONTENT-TYPE~.

   Lambda list:
     :

- =DEFINE-EXACT-HANDLER= (macro)
   Define function to run when peer closes http stream on ~CONNECTION~ (or any
   server defined in future) if the path of the stream is ~PATH~.

   Lambda list:
     :

- =DEFINE-PREFIX-HANDLER= (macro)
   Define function to run when peer closes http stream on ~CONNECTION~ (or any
   server defined in future) if the path of the stream starts with ~PREFIX~.

   Lambda list:
     :

- =PROCESS-SERVER-STREAM= (function)
   Make a HTTP2 connection of ~CONNECTION-CLASS~ on the underlying ~STREAM~ (that is a
   stream in Common Lisp sense, so either network stream or even standard io) and
   read frames from it until ~END-OF-FILE~ (client closed the underlying stream - or
   maybe we do) or ~GO-AWAY~ (client closes connection - or maybe we do) is
   signalled.

   Lambda list:
     :

- =DISPATCHER-MIXIN= (class)
   Server with behaviour that is defined by two sets of handlers, exact and
   prefix. Appropriate handler is run to process the request when peer closes the
   http2 stream. The exact handler must match fully the path (i.e., excluding
   query), the path must start with the prefix handler to match.

   Protocol and domain are not checked. The behaviour is implemented in the
   appropriate ~PEER-ENDS-HTTP-STREAM~ method.

   The handlers are set using ~DEFINE-PREFIX-HANDLER~ or ~DEFINE-EXACT-HANDLER~, and
   are functions typically created by ~HANDLER~ macro, or (in simple cases) by
   ~REDIRECT-HANDLER~ or ~SEND-TEXT-HANDLER~ functions.

     Superclasses:
     : STANDARD-OBJECT

- =VANILLA-SERVER-CONNECTION= (class)
   A server connection that spawns streams of ~VANILLA-SERVER-STREAM~ type when a
   new stream is requested, allows scheduled or other asynchronous writes, and
   optionally prints activities.

     Superclasses:
     : SERVER-HTTP2-CONNECTION DISPATCHER-MIXIN THREADED-SERVER-MIXIN

- =VANILLA-SERVER-STREAM= (class)
   A server-side stream that can be used as a binary output stream, optionally
   prints activities, and reads full body from client if clients sends one.

     Superclasses:
     : SERVER-STREAM BODY-COLLECTING-MIXIN

- =KILL-SERVER= (restart)
   Kill server and close its underlying network stream. Bound in
   ~CREATE-HTTPS-SERVER~.


#+END:
* Changing internals: Callbacks
#+BEGIN: lisp-fns-doc :section http2::@callbacks :package http2
The reader functions for individual frames may call a callback that is supposed
to handle received frame in some way. All callbacks have stream or connection as
the first parameter.

In addition to the behaviour described below, all callback log the behaviour
when relevant stream or connection has logging-object as superclass.

- =APPLY-DATA-FRAME= (function)
   Data frame is received by a stream.
    By default does nothing; there are several mixins that implement reading the
    data.

   Lambda list:
     : STREAM PAYLOAD

- =APPLY-STREAM-PRIORITY= (function)
   Called when priority frame - or other frame with priority settings set -
   arrives. Does nothing, as priorities are deprecated in RFC9113 anyway.

   Lambda list:
     : STREAM EXCLUSIVE WEIGHT STREAM-DEPENDENCY

- =APPLY-WINDOW-SIZE-INCREMENT= (function)
   Called on window update frame. By default, increases ~PEER-WINDOW-SIZE~ slot of
   the strem or connection.

   Lambda list:
     : OBJECT INCREMENT

- =PEER-RESETS-STREAM= (function)
   The RST_STREAM frame fully terminates the referenced stream and
      causes it to enter the "closed" state.  After receiving a RST_STREAM
      on a stream, the receiver MUST ~NOT~ send additional frames for that
      stream, with the exception of ~PRIORITY~.  However, after sending the
      RST_STREAM, the sending endpoint MUST be prepared to receive and
      process additional frames sent on the stream that might have been
      sent by the peer prior to the arrival of the RST_STREAM.

   Lambda list:
     : STREAM ERROR-CODE

- =SET-PEER-SETTING= (function)
   Process received information about peers setting.

   The setting relates to the ~CONNECTION~. ~NAME~ is a keyword symbol (see
   *~SETTINGS~*, subject to possible change to 16bit number in future) and ~VALUE~ is
   32bit number.

   Lambda list:
     : CONNECTION NAME VALUE

- =PEER-EXPECTS-SETTINGS-ACK= (function)
   Called when settings-frame without ~ACK~ is received, after individual
   ~SET-PEER-SETTING~ calls. By default, send ~ACK~ frame.

   Lambda list:
     : CONNECTION

- =PEER-ACKS-SETTINGS= (function)
   Called when SETTINGS-FRAME with ~ACK~ flag is received. By default does nothing.

   Lambda list:
     : CONNECTION

- =PEER-ENDS-HTTP-STREAM= (function)
   Do relevant state changes when closing http stream (as part of received ~HEADERS~ or
   ~PAYLOAD~).

   Lambda list:
     : STREAM

- =HANDLE-UNDEFINED-FRAME= (function)
   Callback that is called when a frame of unknown type is received - see
   extensions.

   Lambda list:
     : TYPE FLAGS LENGTH

- =DO-PONG= (function)
   Called when ping-frame with ~ACK~ is received. By default warns about unexpected ping response; see also ~TIMESHIFT-PINGING-CONNECTION~ mixin.

   Lambda list:
     : CONNECTION DATA

- =DO-GOAWAY= (function)
   Called when a go-away frame is received. By default throws ~GO-AWAY~ condition if
   error was reported.

   Lambda list:
     : CONNECTION ERROR-CODE LAST-STREAM-ID DEBUG-DATA


#+END:
* Low level Debugging

The trace macro should suffice for low level debugging, e.g:

- to watch frames
  #+begin_src lisp
    (trace read-frame)
    (trace write-frame-header
           . #+sbcl (:print  (frame-type-name  (aref *frame-types* (sb-debug:arg 2)))))
  #+end_src

- to watch window size increase and decrease
  #+begin_src lisp
    (trace write-window-update-frame)
    (trace read-data-frame)
  #+end_src

The specific debugging code will likely be slowly removed from the code.
